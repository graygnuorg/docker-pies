divert(-1) m4_dnl -*- m4 -*-
# GNU Pies preprocess setup for Savannah hosts
changecom(/*,*/)

/* ------------------------------
 * Simulate --prefix-builtins.    
 * Borrowed from Autoconf          
 * ------------------------------- */

define(`m4_define',   defn(`define'))
define(`m4_defn',     defn(`defn'))
define(`m4_undefine', defn(`undefine'))

m4_undefine(`define')
m4_undefine(`defn')
m4_undefine(`undefine')

/* m4_copy(SRC, DST)
 * -----------------
 * Define DST as the definition of SRC.
 * What's the difference between:
 * 1. m4_copy(`from', `to')
 * 2. m4_define(`to', `from($@)')
 * Well, obviously 1 is more expensive in space.  Maybe 2 is more expensive
 * in time, but because of the space cost of 1, it's not that obvious.
 * Nevertheless, one huge difference is the handling of `$0'.  If `from'
 * uses `$0', then with 1, `to''s `$0' is `to', while it is `from' in 2.
 * The user will certainly prefer to see `to'.
 */
m4_define(`m4_copy',
`m4_define(`$2', m4_defn(`$1'))')

/* m4_rename(SRC, DST)
 * -------------------
 * Rename the macro SRC as DST.
 */
m4_define(`m4_rename',
`m4_copy(`$1', `$2')m4_undefine(`$1')')

/* m4_rename_m4(MACRO-NAME)
 * ------------------------
 * Rename MACRO-NAME as m4_MACRO-NAME.
 */
m4_define(`m4_rename_m4',
`m4_rename(`$1', `m4_$1')')

/* Some m4 internals have names colliding with tokens we might use.
 * Rename them a` la `m4 --prefix-builtins'.
 */
m4_rename_m4(`builtin')
m4_rename_m4(`changecom')
m4_rename_m4(`changequote')
m4_rename_m4(`debugfile')
m4_rename_m4(`debugmode')
m4_rename_m4(`decr')
m4_rename_m4(`divert')
m4_rename_m4(`divnum')
m4_rename_m4(`dumpdef')
m4_rename_m4(`errprint')
m4_rename_m4(`esyscmd')
m4_rename_m4(`eval')
m4_rename_m4(`format')
m4_rename_m4(`ifdef')
m4_rename_m4(`ifelse')
m4_rename_m4(`include')
m4_rename_m4(`incr')
m4_rename_m4(`index')
m4_rename_m4(`indir')
m4_rename_m4(`len')
m4_rename(`m4exit', `m4_exit')
m4_rename(`m4wrap', `m4_wrap')
m4_rename_m4(`maketemp')
m4_rename_m4(`patsubst')
m4_rename_m4(`popdef')
m4_rename_m4(`pushdef')
m4_rename_m4(`regexp')
m4_rename_m4(`shift')
m4_rename_m4(`sinclude')
m4_rename_m4(`substr')
m4_rename_m4(`symbols')
m4_rename_m4(`syscmd')
m4_rename_m4(`sysval')
m4_rename_m4(`traceoff')
m4_rename_m4(`traceon')
m4_rename_m4(`translit')
m4_rename_m4(`undivert')
m4_rename_m4(`dnl')
m4_rename_m4(`__line__')
m4_rename_m4(`__file__')

/* Macros for working with environment variables */

/* CF_ENVAR(VAR)
 * -------------
 * Define macro VAR to the value of the environment variable with this name.
 */
m4_define(`CF_ENVAR',m4_dnl
`m4_define(`$1',m4_esyscmd(printf "$`$1'"))')

/* CF_WITH_ENVAR(VAR,TEXT)
 * -----------------------
 * Temporarily redefine VAR to the value of the environment variable VAR and
 * expand TEXT.
 */
m4_define(`CF_WITH_ENVAR',m4_dnl
`m4_pushdef(`$1',m4_esyscmd(printf "$`$1'"))$2`'m4_popdef(`$1')')

/* CF_IF_ENVAR(VAR,IF-SET,IF-UNSET)
 * --------------------------------
 * If the environment variable VAR is defined and has a non-empty value,
 * expand IF-SET, otherwise expand IF-UNSET.  Expand VAR in IF-SET to the
 * actual value of the environment variable.
 */
m4_define(`CF_IF_ENVAR',m4_dnl
`CF_WITH_ENVAR(`$1',`m4_ifelse($1,`',`$3',`$2')')')

/* CF_STDO
 * -------
 * Capture standard output and error according to environment variables.
 *
 * Usage:
 *   component X {
 *        command Y;
 *        CF_STDO;
 *   }
 *
 * If PIES_SYSLOG_SERVER is set, standard streams are redirected to syslog.
 * Otherwise, they are redirected to the container stdout/stderr.
 */
m4_define(`CF_STDO',m4_dnl
`CF_IF_ENVAR(`PIES_SYSLOG_SERVER',
`stdout syslog info;
stderr syslog err',
`stdout file /proc/1/fd/1;
stderr file /proc/1/fd/1')')

m4_divert(0)m4_dnl
